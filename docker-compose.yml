# version: '3.5'

networks: 
  session-net: 
    name: session-net
    driver: bridge
    attachable: true

    ipam: 
      driver: default
      config: 
        - subnet: 172.23.0.0/16
          ip_range: 172.23.2.0/24
          # gateway: 172.23.2.254
    
services:

  nginx-rtmp: 
    build: 
      context: ./ 
      dockerfile: ./dockerfiles/nginx_rtmp.Dockerfile
    image: session/nginx-rtmp 

  frontend-base: 
    build: 
      context: ./
      dockerfile: ./dockerfiles/frontend_base.Dockerfile
    image: session/frontend_base

  gateway:
    container_name: '${DOMAIN_NAME}'
    build: 
      context: ./
      dockerfile: ./dockerfiles/gateway.Dockerfile
    image: session/gateway
    ports: 
      - 0.0.0.0:80:80
    networks: 
      - session-net
    stop_signal: SIGINT
  
  frontend:
    container_name: 'frontend.${DOMAIN_NAME}'
    build: 
      context: ./
      dockerfile: ./dockerfiles/frontend.Dockerfile
    image: session/frontend
    ports:
      # - "0.0.0.0:80:80" # 80 points to the gateway 
      - "0.0.0.0:3000:80"
    networks:
      - session-net
    stop_signal: SIGKILL

  ingest-proxy:
    container_name: 'ingest-proxy.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: dockerfiles/ingest_proxy.Dockerfile
    image: session/ingest-proxy 
    ports:
      - 0.0.0.0:9000:1935
      - 0.0.0.0:9001:9999
      # 9999 haproxy admin port
    networks: 
      - session-net

  ingest-instance:
    container_name: 'ingest.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: dockerfiles/ingest.Dockerfile
    image: session/ingest
    ports: 
      - "0.0.0.0:9090:1935"
      - "0.0.0.0:8080:8080"
    networks: 
      - session-net
    stop_signal: SIGINT

  stream-registry:
    container_name: 'stream-registry.${DOMAIN_NAME}'
    build: 
      context: ./
      dockerfile: ./dockerfiles/stream_registry.Dockerfile
    image: session/stream-registry
    ports:
      - "0.0.0.0:8002:80"
    networks: 
      - session-net
    stop_signal: SIGINT
    # Flask will quit the app on SIGINT. 
    # Docker (by default) sends SIGTERM and if that doesn't work 
    # SIGKILL will kill the process.

  cdn-proxy:
    container_name: 'cdn-proxy.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: ./dockerfiles/cdn_proxy.Dockerfile
    image: session/cdn-proxy
    ports:
      - "0.0.0.0:12000:1935"
    networks:
      session-net:
        ipv4_address: 172.23.1.2

  cdn-instance:
    container_name: 'cdn.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: ./dockerfiles/cdn_instance.Dockerfile
    image: session/cdn
    ports:
      - "0.0.0.0:11000:1935" # rtmp server
      - "0.0.0.0:10000:80" # hls server
    networks:
      - session-net 

  cdn-manager:
    container_name: 'cdn-manager.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: ./dockerfiles/cdn_manager.Dockerfile
    image: session/cdn-manager
    ports:
      - "0.0.0.0:8004:80"
    networks:
      - session-net 
    stop_signal: SIGINT

  registry-database:
    container_name: 'registry-db.${DOMAIN_NAME}'
    build: 
      context: ./
      dockerfile: ./dockerfiles/registry_db.Dockerfile
    image: session/registry-db
    ports: 
      - "0.0.0.0:27017:27017"
    networks: 
      - session-net

  users-db:
    container_name: 'users-db.${DOMAIN_NAME}'
    build: 
      context: ./ 
      dockerfile: ./dockerfiles/users_db.Dockerfile
    image: session/users-db
    ports: 
      - "0.0.0.0:37017:27017"
    networks: 
      - session-net

  # Note: If you are assigning a custom name to your db service on the line below, 
  # make sure it does not contain underscores
  tokens-db:
    container_name: 'tokens-db.${DOMAIN_NAME}'
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: supertokens_user 
      POSTGRES_PASSWORD: somePassword 
      POSTGRES_DB: supertokens
    ports:
      - 5432:5432
    networks:
      - session-net
    # restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'supertokens_user', '-d', 'supertokens']
      interval: 5s
      timeout: 5s
      retries: 5

  tokens-core:
    container_name: 'tokens-core.${DOMAIN_NAME}'
    image: registry.supertokens.io/supertokens/supertokens-postgresql:7.0
    depends_on:
      tokens-db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@tokens-db.${DOMAIN_NAME}:5432/supertokens"
    networks:
      - session-net
    # restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5
    stop_signal: SIGINT

  tokens-api: 
    container_name: 'tokens-api.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: ./dockerfiles/tokens_api.Dockerfile
    image: session/tokens-api
    ports: 
      - "0.0.0.0:8100:80"
    networks: 
      - session-net
    stop_signal: SIGINT

  chat-relay:
    container_name: 'chat-relay.${DOMAIN_NAME}'
    build: 
      context: ./
      dockerfile: ./dockerfiles/chat_relay.Dockerfile
    image: session/chat-relay
    ports: 
      - "0.0.0.0:12345:80"
    networks: 
      - session-net
    stop_signal: SIGINT

  # Just a bot
  streamer:
    container_name: 'streamer.${DOMAIN_NAME}'
    build:
      context: ./
      dockerfile: ./dockerfiles/streamer.Dockerfile
    image: session/streamer
    networks: 
      - session-net
    stop_signal: SIGINT

  # Another bot
  viewer:
    container_name: 'viewer.${DOMAIN_NAME}'
    build: 
      context: ./
      dockerfile: ./dockerfiles/viewer.Dockerfile
    image: session/viewer
    networks: 
      - session-net
    stop_signal: SIGINT

  # Api for printing headers, cookies and request payload 
  # used just for debugging. 
  # Essentially another bot. 
  printer: 
    container_name: printer
    build:
      context: ./
      dockerfile: ./dockerfiles/printer.Dockerfile
    image: session/printer
    ports:
      - "0.0.0.0:8010:80"
    networks:
      - session-net
    stop_signal: SIGINT