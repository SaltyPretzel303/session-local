events {
	use epoll;
	worker_connections 1024;
}

# Accept transcoded rtmp streams coming from the ingest rtmp server.
rtmp {
	server {
		listen 11000;

		application hls {
			live on;

			# Only accept publishing from cdn_proxy.
			# allow publish ;
			# deny publish all;
			deny play all;
			# Deny playing rtmp stream ...

			# Package streams as HLS
			hls on;
			hls_path /var/www/live;
			hls_nested on;

			hls_fragment 2s;
			hls_playlist_length 12s;
			# wait_video on;
			# sync 50ms;
			# interleave on;
			# wait_key on;
			# hls_cleanup on; # default is on as well

			hls_fragment_naming system;

			# hls_datetime system; # doesn't work for some reason

			hls_keys on;
			hls_key_path /var/www/keys;
			hls_key_url /keys/;
			hls_fragments_per_key 10;
		}
	}
}

# Server hsl stream to the viewers.
http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	include /etc/nginx/mime.types;

	# raw byte stream
	default_type application/octet-stream;

	server {
		listen 10000 default_server;
		server_name _;

		root /var/www;

		# It is assumed that the user is previousley authenticated and the
		# coockie_sessionId field is populated.
		# sha1 signature is calculated and passed back to the client requesting *.m3u8,
		# This (modified) URI is gonna be used for each subsequent request for *.ts file.
		location ~ ^/live/([^/]+)/index\.m3u8$ {
			expires -1d;
			set $stream_username $1;
			set_hmac_sha1 $sig "session_secret_key" "$cookie_sessionid $stream_username";
			set_encode_base64 $sig $sig;

			subs_filter_types application/vnd.apple.mpegurl;

			# Note that $sig will have '=' at the end it is not the regex's fault.
			subs_filter "URI=\"/keys/([^/]+)/([0-9]+)\.key\"" "URI=\"/keys/$1/$2.key?s=$sig\"" gr;
		}

		location ~ ^/keys/([^/]+)/[0-9]+\.key$ {
			set $stream_username $1;
			set $user_sig $arg_s;

			auth_request /authorize_key;
		}

		# Auth request proxy will contain stream_username and sessionId passed
		# from the original requst.
		# Backend is gonna match sesionId againts valid sessions and
		# provide user's data, populated once the user was authenticated.
		location = /authorize_key {
			internal;

			set_hmac_sha1 $sig 'session_secret_key' "$cookie_sessionid $stream_username";
			set_encode_base64 $sig $sig;

			if ($sig != $user_sig) {
				return 403;
			}

			proxy_set_header X-Stream-Username $stream_username;
			proxy_pass http://session-auth:8003/authorize;
			# return 200;
		}


		# Used by the cdn_manager to determine if the cdn instance is available.
		location /health_check {
			return 200;
		}
	}
}