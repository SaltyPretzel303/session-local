# user root;

# error_log /var/log/nginx/err_log.log notice;

events {
	use epoll;
	worker_connections 1024;
}

# Accept transcoded rtmp streams coming from the cdn proxy.
rtmp {
	server {
		listen 1935;

		# TODO rename to something more intuitive, media or ... content ...
		application hls {
			live on;

			# Only accept publishing from cdn_proxy.
			# allow publish ;
			# deny publish all;
			# deny play all;
			# Deny playing rtmp stream ...

			# Package streams as HLS
			hls on;
			hls_path /var/www/live;
			hls_nested on;

			hls_fragment 1s;
			hls_playlist_length 8s;
			# wait_video on;

			# Sets HLS timestamp synchronization threshold. Default is 2ms. This
			# feature  prevents crackling noises after conversion from
			# low-resolution RTMP (1KHz) to high-resolution MPEG-TS (90KHz).
			hls_sync 100ms;
			# aligned - switch fragment when incoming timestamp is a multiple of
			# fragment  duration. This mode makes it possible to generate
			# identical fragments on different nginx instances
			hls_fragment_slicing aligned;

			# interleave on;
			# wait_key on;
			# hls_cleanup on; # default is on as well

			# hls_fragment_naming system;
			hls_fragment_naming sequential;

			hls_keys on;
			hls_key_path /var/www/keys;
			hls_key_url /keys/;

			# Sets the number of HLS fragments encrypted with the same key. Zero
			# means only one key is created at the publish start and all
			# fragments within the session are encrypted with this key. Default
			# is zero.
			hls_fragments_per_key 10;

			# TODO adjust these values
			# adaptive bitrate support
			hls_variant _sd BANDWIDTH=5400k; # source is 5000k
			hls_variant _subsd BANDWIDTH=1200k; # source is 1000k

			on_publish http://cdn-manager.session.com/add_media_server;
			on_publish_done http://cdn-manager.session.com/remove_media_server;
		}

		# Same as hls just without the encryption
		application preview {
			live on;

			hls on;
			hls_path /var/www/preview;
			hls_nested on;

			hls_fragment 10s;
			hls_playlist_length 50s;
			hls_fragment_naming system;

			on_publish http://cdn-manager.session.com/add_preview_server;
			on_publish_done http://cdn-manager.session.com/remove_preview_server;
		}

	}
}

# Serves hsl stream to the viewers.
http {

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	include /etc/nginx/mime.types;

	# raw byte stream
	default_type application/octet-stream;

	# default docker dns server
	resolver 127.0.0.11;
	server {
		listen 80 default_server;
		server_name _;

		root /var/www;

		add_header Access-Control-Allow-Origin 'http://session.com' always;
		add_header Access-Control-Allow-Credentials 'true' always;
		add_header Access-Control-Allow-Headers 'Origin,Content-Type,rid,Cookie,st-auth-mode,someField';
		add_header Access-Control-Allow-Methods 'GET, OPTIONS';

		# 'master' m3u8 file will point to _subsd|_sd.m3u8 files according to
		# the current available bitrate.
		# location ~ ^/live/([^/]+).m3u8 {
		# 	# ... just empty ?
		# }

		# TODO all this sha_signature stuff can be removed ... right ?
		# I'am doing custom authorization it shouldn't matter.
		# location ~ ^/preview/* should have no restrictions, just report at
		# cdn_manager ?
		#
		# It is assumed that the user is previousley authenticated and the
		# cookie_sessionId field is populated.
		#
		# sha1 signature is calculated and passed back to the client requesting *.m3u8,
		# This (modified) URI is gonna be used for each subsequent request for
		# *.ts file.
		location ~ ^/live/([^/]+)_([^/]+)/index\.m3u8$ {
			# location ~ ^/live/([^/]+)_(sd|subsd)/index\.m3u8$ {
			expires -1d;
			set $stream_username $1;
			set $stream_quality $2;

			# NOTE Carefully with this approach, when using abr, each quality
			# of the same stream will have the same signature beacuse only
			# the streamer name is used to calculate sig.
			# Previously stream_quality is used for sig calculation and it worked
			# but it is never tested with the abr.

			# set_hmac_sha1 $sig "session_secret_key" "$cookie_session $stream_username";
			set_hmac_sha1 $sig "session_secret_key" "$stream_username";
			set_encode_base64 $sig $sig;

			subs_filter_types application/vnd.apple.mpegurl;

			# Note that $sig will have '=' at the end it is not the regex's fault.
			subs_filter "URI=\"/keys/([^/]+)/([0-9]+)\.key\"" "URI=\"/keys/$1/$2.key?s=$sig\"" gr;
		}

		location ~ ^/keys/([^/]+)_([^/]+)/[0-9]+\.key$ {
			# location ~ ^/keys/([^/]+)_(sd|subsd)/[0-9]+\.key$ {
			set $stream_username $1;
			set $stream_quality $2;
			set $user_sig $arg_s;

			# Can not just return 200 here, this path has to return encryption
			# key and that will happen only if auth_request result is 200
			# or auth_request call is ommited.
			auth_request /authorize_key;
		}

		# Auth request proxy will contain stream_username and sessionId passed
		# from the original requst.
		# Backend is gonna match sesionId againts valid sessions and
		# provide user's data, populated once the user was authenticated.
		location = /authorize_key {
			internal;

			set_hmac_sha1 $sig 'session_secret_key' "$stream_username";
			set_encode_base64 $sig $sig;

			if ($sig != $user_sig) {
				return 403;
			}

			proxy_set_header X-Stream-Username $stream_username;

			proxy_pass http://tokens-api.session.com/verify;
		}

		# Used by the cdn_manager to determine if the cdn instance is available.
		location /health_check {
			return 200;
		}
	}
}