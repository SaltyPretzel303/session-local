# user nginx;
user root;

worker_processes 1;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

error_log /var/log/nginx/err_log.log notice;
# access_log /var/log/nginx/acc_log.log debug;

events {
	use epoll;
	worker_connections 1024;
}

http {
	server {
		listen 8080;

		location /health_check {
			return 200;
		}

		location /live {
			root /var/www/;
		}

		location /control {
			rtmp_control all;
		}
	}
}

rtmp {
	server {
		# TODO repalce with 1935 (default rtmp port) so that the port don't have
		# be specified. Should be standardized and included in standard network
		# configurations.
		listen 9090;

		application ingest {
			live on;
			record off;

			# Don't allow RTMP playback
			# deny play all;

			# ---
			# THE WORKING ONE
			# exec_push /usr/bin/ffmpeg -re -i rtmp://localhost:9090/ingest/$name
			# -c copy -flvflags no_duration_filesize
			# -f flv rtmp://localhost:9090/local_hls/$name;
			# ---
			# -map 0:v -map 0:a -f tee '[f=flv]rtmp://localhost:9090/local_hls/stream' 2>/var/log/nginx/ff_log.log;
			# ---
			# -vf "drawtext=text='%{gmtime\:%Y-%m-%d_%H-%M-%S.%6N-%Z}':fontcolor=red:fontsize=36"
			#
			#--------------------------------------
			#
			#
			# TODO test latecny once without hls server part
			# just sending directly from frmpeg to cdn-proxy
			exec ffmpeg -i rtmp://localhost:9090/ingest/$name
			-c copy -f flv rtmp://localhost:9090/sd/$name
			-c copy -f flv rtmp://localhost:9090/subsd/$name
			-c copy -f flv rtmp://localhost:9090/preview/$name;

			# exec ffmpeg -i rtmp://localhost:9090/ingest/$name
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 125k
			# -c:a copy
			# -s 426x240 -r 30 -sws_flags bilinear
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://localhost:9090/preview/$name_subsd
			# #
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 450k
			# -c:a copy
			# -s 854x480 -r 30 -sws_flags bilinear
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://localhost:9090/subsd/$name_sd
			# #
			# -c:v libx264 -x264opts keyint=60:no-scenecut
			# -c:a copy -r 30
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://localhost:9090/sd/$name_hd 2>/var/log/nginx/ff_log.log;

			# The on_publish callback will redirect the RTMP
			# stream to the streamer's username, rather than their
			# secret stream key.
			on_publish http://stream-registry.session.com/start_stream;
			on_publish_done http://stream-registry.session.com/stop_stream;

			# TODO if transcoding is done from the external script, setting
			# timeout on the rtmp input stream would fix the issue with not
			# being able to stop the extenral script/process after the original
			# input stream has stopeed.

		}

		application sd {
			live on; # Toggles live mode i.e. one-to-many broadcasting.
			record off;

			exec ffmpeg -i rtmp://localhost:9090/sd/$name
			# why not just -c:v copy as well, which will remove the need for
			# separate c:v and c:a ?
			-c:v libx264 -x264opts keyint=60:no-scenecut
			-c:a copy
			-tune zerolatency -preset veryfast
			-f flv rtmp://cdn-proxy.session.com/standard/$name_sd;

			# push rtmp://cdn-proxy.session.com/standard;
		}

		application subsd {
			live on; # Toggles live mode i.e. one-to-many broadcasting.
			record off;

			exec ffmpeg -i rtmp://localhost:9090/subsd/$name
			-c:v libx264 -x264opts keyint=60:no-scenecut -b:v 450k
			-c:a copy
			-s 854x480 -r 30 -sws_flags bilinear
			-tune zerolatency -preset veryfast
			-f flv rtmp://cdn-proxy.session.com/standard/$name_subsd;

			# push rtmp://cdn-proxy.session.com/standard;
		}

		application preview {
			live on; # Toggles live mode i.e. one-to-many broadcasting.
			record off;

			# Very low quality without no audio, appropriate for preview or
			# thumbnails. Quality could be further adjusted according to the
			# existing abbreviations (if the current one is too low).

			exec ffmpeg -i rtmp://localhost:9090/preview/$name
			-c:v libx264 -x264opts keyint=60:no-scenecut -b:v 125k
			# -c:a copy
			-s 128x96 -r 30 -sws_flags bilinear
			-tune zerolatency -preset veryfast
			-f flv rtmp://cdn-proxy.session.com/preview/$name;

			# push rtmp://cdn-proxy.session.com/standard;
		}

		# Used for debugging and latency measurement between 'local' and 'remote' cdn.
		# application local_hls {
		# 	live on;
		# 	# deny play all;

		# 	hls on;
		# 	hls_path /var/www/live;
		# 	hls_nested on;
		# 	# TODO test latency without hls on ingest node.
		# 	hls_fragment 2s;
		# 	hls_playlist_length 12s;
		# 	# push rtmp://cdn-eu.session.com:11000/hls;
		# 	# push rtmp://cdn-na.session.com:11000/hls;
		# 	# push rtmp://cdn-as.session.com:11000/hls;
		# 	push rtmp://cdn-proxy.session.com/standard;
		# }
	}
}