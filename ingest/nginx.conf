# user nginx;
user root;

worker_processes 1;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

error_log /var/log/nginx/err_log.log notice;
# access_log /var/log/nginx/acc_log.log debug;

events {
	use epoll;
	worker_connections 1024;
}

rtmp {
	server {

		# default rtmp port
		listen 1935;

		application ingest {
			live on;
			record off;


			exec ffmpeg -hide_banner -i rtmp://localhost/ingest/$name
			-c:a copy
			-c:v libx264 -x264opts keyint=60:no-scenecut -b:v 5000k -s 1920x1080
			-tune zerolatency -preset veryfast
			-f flv rtmp://cdn-proxy.session.com/stream/$name_sd
			#
			# -c:a copy
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 2000k -s 1280x720
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://cdn-proxy.session.com/stream/$name_midsd
			#
			# -c:a copy
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 1000k -s 1280x720
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://cdn-proxy.session.com/stream/$name_lsd
			#
			# -c:a copy
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 1000k -s 854x480
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://cdn-proxy.session.com/stream/$name_subsd
			#
			-c:a copy
			-c:v libx264 -x264opts keyint=60:no-scenecut -b:v 1000k -s 640x360
			-tune zerolatency -preset veryfast
			-f flv rtmp://cdn-proxy.session.com/stream/$name_subsd
			#
			# -c:a copy
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 1000k -s 1280x720
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://cdn-proxy.session.com/stream/$name_subsd
			#
			# -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 125k
			# -s 128x72 -r 20 -sws_flags bilinear
			# -tune zerolatency -preset veryfast
			# -f flv rtmp://cdn-proxy.session.com/preview/$name;
			#
			-c:v libx264 -r 20 -b:v 125k -s 128x72
			-an -sws_flags bilinear
			-tune zerolatency -preset veryfast
			-f flv rtmp://cdn-proxy.session.com/preview/$name 2>/fflog.log;


			# The on_publish callback will redirect the RTMP
			# stream to the streamer's username, rather than their
			# secret stream key.
			on_publish http://stream-registry.session.com/start_stream;
			on_publish_done http://stream-registry.session.com/stop_stream;

			# TODO if transcoding is done from the external script, setting
			# timeout on the rtmp input stream would fix the issue with not
			# being able to stop the external script/process after the original
			# input stream has stopeed.

		}

	}
}

http {
	server {
		listen 80;

		# Required for haproxy !
		# Dinamyc dns wont work on newly added instances if healthcheck is not
		# enabled, basicaly dns resolution is done after hc.
		location /hc {
			return 200;
		}
	}
}