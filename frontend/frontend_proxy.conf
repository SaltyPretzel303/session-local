events {

}

http {

	include	mime.types;

	log_format custom 'uri: $uri args: $args -> from:$remote_addr to:$server_addr proxy_to:$proxy_host session:$cookie_session code:$status';
	access_log /var/log/nginx/access.log custom;

	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	server {

		listen 80;
		server_name front_proxy;

		# If frontend is built and hosted as it should be. 
		# location / {
		# 	root /var/www;
		# 	try_files $uri $uri/ /index.html;
		# }

		# When using varibles from/in url hostname resolver have to be specified.
		# Otherwise nginx will try to resolve all hostnames before the startup,
		# which is not ideal since I can't guarantee session-auth will be
		# deployed before this service.
		location ~ ^/auth/([^/]+) {
			

			resolver 127.0.0.11;
			# resolver 8.8.8.8;
			proxy_pass http://session-auth:8003/$1;

			# resp.headers.add("Access-Control-Allow-Credentials","true")
			# resp.headers.add("Access-Control-Allow-Origin","http://localhost:3000")
			# resp.headers.add("Access-Control-Allow-Headers","Content-type")

			# proxy_set_header Access-Control-Allow-Credentials true;
			# proxy_set_header Access-Contrl-Allow-origin "http://localhost:3000";
			# proxy_set_header Access-Control-Allow-Headers "Content-type";
			# proxy_set_header Access-Control-Allow-Headers "X-Cookie";
			
		}

		location ~ ^/reg/(.+) {
			resolver 127.0.0.11;
			proxy_pass http://session-stream-registry:8002/$1;
		}


		# These two should be accessed directly (this is cdn). 
		# location ~ ^/watch/(.*) {
		# 	resolver 127.0.0.11;
		# 	proxy_pass http://session-cdn-eu:10000/$1;
		# }

		# location ~ ^/keys/(.*) {
		# 	resolver 127.0.0.11;
		# 	proxy_pass http://session-cdn-eu:10000/keys/$1$is_args$args;
		# 	# proxy_pass http://printer:8010/keys/$1$is_args$args;
		# }


		# Frontend path. 
		location ~ ^/(.*) {
			proxy_pass http://127.0.0.1:3000/$1;

			# proxy_http_version 1.1;
			# proxy_set_header Host $host;
			# proxy_cache_bypass $http_upgrade;
			# proxy_set_header Upgrade $http_upgrade;
			# proxy_set_header Connection $conection_upgrade;

			# proxy_set_header Host localhost;
			# proxy_cache_bypass $http_upgrade;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
		}

	}
}