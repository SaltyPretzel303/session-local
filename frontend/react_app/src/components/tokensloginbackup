import { useState, useEffect, Dispatch } from "react";
import Modal from "react-modal";
import Overlay from 'react-modal'
import { SignInAndUp } from "supertokens-auth-react/recipe/thirdpartyemailpassword/prebuiltui";
import Session from "supertokens-auth-react/recipe/session";
import { useNavigate } from "react-router-dom";

type LoginPopupProps = {
	loginVisible: boolean
	setLoginVisible: Dispatch<boolean>
	shouldDisplayLogin: boolean
	setShouldDisplayLogin: Dispatch<boolean>
}

export default function LoginPopup(props: LoginPopupProps) {

	let sessionContext = Session.useSessionContext();
	// const navigate = useNavigate();
	const [isModalOpen, setIsModalOpen] = useState(false);

	const openModal = () => setIsModalOpen(true);
	const closeModal = () => setIsModalOpen(false);

	useEffect(() => {
		if (sessionContext.loading) {
			return;
		}
		if (sessionContext.doesSessionExist) {
			closeModal();
		} else {
			openModal();
		}
	}, [sessionContext]);

	if (sessionContext.loading) {
		return null;
	}

	return (
		<div>
			{
				props.loginVisible &&
				props.shouldDisplayLogin &&
				sessionContext.doesSessionExist && (
					// We wrap this with <SessionAuth /> so that
					// all claims are validated before showing the logged in UI.
					// For example, if email verification is switched on, and
					// the user's email is not verified, then <SessionAuth />
					// will redirect to the email verification page.
					<Session.SessionAuth>
						<h2>You are logged In! </h2>
						<h3>UserId: {sessionContext.userId}</h3>
						<button onClick={() => Session.signOut()}>Sign Out</button>
					</Session.SessionAuth>
				)}
			<Overlay isOpen={props.loginVisible} >
				<Modal
					ariaHideApp={false} // kinda required for modal ... just keep it 
					isOpen={props.loginVisible}
					contentLabel="Auth Modal"
				>
					{/* <SignInAndUp navigate={navigate} /> */}
					<SignInAndUp />
				</Modal>
			</Overlay>
		</div>
	);
}