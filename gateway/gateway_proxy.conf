events {

}

http {

	include	mime.types;

	log_format custom 'm: $request_method for: $uri args: $args -> from:$remote_addr to:$server_addr proxy_to:$proxy_host session:$cookie_session code:$status';
	access_log /var/log/nginx/access.log custom;

	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# Default docker dns resolver.
	# When using varibles from url, hostname resolver have to be specified,
	# otherwise nginx will try to resolve all hostnames before the startup,
	# which is not ideal since I can't guarantee tokens-api.session will be
	# deployed before this service.
	resolver 127.0.0.11;
	server {

		listen 80;
		server_name session.gateway;

		# If frontend is built and hosted as it should be.
		# location / {
		# 	root /var/www;
		# 	try_files $uri $uri/ /index.html;
		# }

		# Special case.
		# Remove path can't be under /auth because all routes under /auth
		# will require valid accessToken and bots (the only ones using this api)
		# wont't have it.
		location ~ ^/remove/(.*) {
			proxy_pass http://tokens-api.session.com/remove/$1;
		}

		location ~ ^/get_user/(.*) {
			proxy_pass http://tokens-api.session.com/get_user/$1;
		}

		# Tokens api
		location ~ ^/auth/(.+) {
			proxy_pass http://tokens-api.session.com/auth/$1$is_args$args;
		}

		# Stream registry.
		location ~ ^/stream/(.+) {
			proxy_pass http://stream-registry.session.com/$1$is_args$args;
		}

		location /health_check {
			proxy_pass http://cdn-eu.session.com/health_check;
		}

		# These two should be accessed directly (this is cdn).
		# location ~ ^/watch/(.*) {
		# 	resolver 127.0.0.11;
		# 	proxy_pass http://cdn-eu.session.com:10000/$1;
		# }
		# location ~ ^/keys/(.*) {
		# 	resolver 127.0.0.11;
		# 	proxy_pass http://cdn-eu.session.com:10000/keys/$1$is_args$args;
		# 	# proxy_pass http://printer:8010/keys/$1$is_args$args;
		# }
		location ~ ^/printer {
			proxy_pass http://printer.com;
		}

		# React Frontend path.
		location ~ ^/(.*) {

			proxy_pass http://frontend.session.com/$1$is_args$args;

			# Reuired for webSocket connetions (react will create them)
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
		}

	}
}